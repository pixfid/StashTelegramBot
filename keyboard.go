package main

import (
	"fmt"

	"github.com/go-telegram/bot/models"
)

// CreateSceneKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ü–µ–Ω—ã
func CreateSceneKeyboard(scene *Scene, streamURL string) *models.InlineKeyboardMarkup {
	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{},
	}

	// –ö–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
	if len(scene.Performers) > 0 {
		performerRow := []models.InlineKeyboardButton{}

		for i, performer := range scene.Performers {
			// –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
			if i > 0 && i%2 == 0 {
				kb.InlineKeyboard = append(kb.InlineKeyboard, performerRow)
				performerRow = []models.InlineKeyboardButton{}
			}

			performerRow = append(performerRow, models.InlineKeyboardButton{
				Text:         fmt.Sprintf("üîç %s", performer.Name),
				CallbackData: fmt.Sprintf("performer_%s", performer.ID),
			})
		}

		if len(performerRow) > 0 {
			kb.InlineKeyboard = append(kb.InlineKeyboard, performerRow)
		}
	}
	// –ö–Ω–æ–ø–∫–∞ —Å—Ç—É–¥–∏–∏
	if scene.Studio.Name != "" {
		studioRow := []models.InlineKeyboardButton{}
		studioRow = append(studioRow, models.InlineKeyboardButton{
			Text:         fmt.Sprintf("üìπ %s", scene.Studio.Name),
			CallbackData: fmt.Sprintf("studio_%s", scene.Studio.ID),
		})
		if studioRow != nil {
			kb.InlineKeyboard = append(kb.InlineKeyboard, studioRow)
		}
	}

	// –ö–Ω–æ–ø–∫–∞ —Å—Ç—Ä–∏–º–∞
	kb.InlineKeyboard = append(kb.InlineKeyboard, []models.InlineKeyboardButton{
		{
			Text: "üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º",
			URL:  streamURL,
		},
	})

	// –ö–Ω–æ–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∏–¥–µ–æ
	kb.InlineKeyboard = append(kb.InlineKeyboard, []models.InlineKeyboardButton{
		{
			Text:         "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ",
			CallbackData: "random",
		},
	})

	return kb
}

// CreateHelpKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
func CreateHelpKeyboard() *models.InlineKeyboardMarkup {
	return &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ", CallbackData: "random"},
			},
		},
	}
}
