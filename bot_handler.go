package main

import (
	"bytes"
	"context"
	"fmt"
	"math/rand"
	"path"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

// BotHandler —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
type BotHandler struct {
	stash       *StashClient
	config      Config
	fileManager *FileManager
	logger      *Logger
}

func NewBotHandler(config Config) *BotHandler {
	stashClient := NewStashClient(config.StashURL, config.StashAPIKey)
	return &BotHandler{
		stash:       stashClient,
		config:      config,
		fileManager: NewFileManager(config.DATA),
		logger:      NewLogger("BotHandler"),
	}
}

// HandleStart –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
func (h *BotHandler) HandleStart(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.sendHelp(ctx, b, update.Message.Chat.ID)
}

// HandleInfo –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
func (h *BotHandler) HandleInfo(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.sendHelp(ctx, b, update.Message.Chat.ID)
}

// HandleRandom –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random
func (h *BotHandler) HandleRandom(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", update.Message.From.ID)

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üé≤ –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ...",
	})

	scene, err := h.stash.GetRandomScene()
	if err != nil {
		h.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ü–µ–Ω—ã: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err),
		})
		return
	}

	h.sendScene(ctx, b, update.Message.Chat.ID, scene)
}

// HandleMessage –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *BotHandler) HandleMessage(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil || update.Message.Text == "" {
		return
	}

	if strings.HasPrefix(update.Message.Text, "/") {
		return
	}

	h.sendHelp(ctx, b, update.Message.Chat.ID)
}

// HandleCallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
func (h *BotHandler) HandleCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}

	callback := update.CallbackQuery

	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
	})

	switch {
	case callback.Data == "random":
		scene, err := h.stash.GetRandomScene()
		if err != nil {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: callback.Message.Message.Chat.ID,
				Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err),
			})
			return
		}
		h.sendScene(ctx, b, callback.Message.Message.Chat.ID, scene)

	case strings.HasPrefix(callback.Data, "performer_"):
		h.handlePerformerCallback(ctx, b, callback)
	}
}

// handlePerformerCallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
func (h *BotHandler) handlePerformerCallback(ctx context.Context, b *bot.Bot, callback *models.CallbackQuery) {
	performerID := strings.TrimPrefix(callback.Data, "performer_")
	h.logger.Info("–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: %s", performerID)

	query := `
		query FindScenes($performerID: [ID!]) {
			findScenes(
				scene_filter: {
					performers: {
						value: $performerID
						modifier: INCLUDES
					}
				}
			) {
				scenes {
					id
					title
					paths {
						screenshot
						stream
						preview
						sprite
					}
					performers {
						id
						name
					}
				}
				count
			}
		}`

	variables := map[string]interface{}{
		"performerID": []string{performerID},
	}

	resp, err := h.stash.graphQLRequest(query, variables)
	if err != nil {
		h.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: callback.Message.Message.Chat.ID,
			Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %v", err),
		})
		return
	}

	if len(resp.Data.FindScenes.Scenes) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: callback.Message.Message.Chat.ID,
			Text:   "‚ùå –í–∏–¥–µ–æ —Å —ç—Ç–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
		})
		return
	}

	randomIndex := rand.Intn(len(resp.Data.FindScenes.Scenes))
	scene := &resp.Data.FindScenes.Scenes[randomIndex]

	h.sendScene(ctx, b, callback.Message.Message.Chat.ID, scene)
}

// sendScene –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ü–µ–Ω—É
func (h *BotHandler) sendScene(ctx context.Context, b *bot.Bot, chatID int64, scene *Scene) {
	h.logger.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω—ã: %s", scene.Title)

	previewURL := fmt.Sprintf("%s?apikey=%s", scene.Paths.Preview, h.config.StashAPIKey)

	filepath, err := h.fileManager.DownloadFile(previewURL, scene.Title)
	if err != nil {
		h.logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é: %v", err)
		h.sendSceneWithoutPreview(ctx, b, chatID, scene)
		return
	}

	fileData, err := h.fileManager.ReadFile(filepath)
	if err != nil {
		h.logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: %v", err)
		h.sendSceneWithoutPreview(ctx, b, chatID, scene)
		return
	}

	streamURL := fmt.Sprintf("%s", scene.Paths.Stream)
	kb := CreateSceneKeyboard(scene, streamURL)
	caption := fmt.Sprintf("üé¨ <b>%s</b>", escapeHTML(scene.Title))

	params := &bot.SendDocumentParams{
		ChatID: chatID,
		Document: &models.InputFileUpload{
			Filename: path.Base(filepath),
			Data:     bytes.NewReader(fileData),
		},
		Caption:     caption,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: kb,
	}

	_, err = b.SendDocument(ctx, params)
	if err != nil {
		h.logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: %v", err)
		h.sendSceneWithoutPreview(ctx, b, chatID, scene)
	} else {
		h.logger.Success("–°—Ü–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}

	h.fileManager.DeleteFile(filepath)
}

// sendSceneWithoutPreview –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ü–µ–Ω—É –±–µ–∑ –ø—Ä–µ–≤—å—é
func (h *BotHandler) sendSceneWithoutPreview(ctx context.Context, b *bot.Bot, chatID int64, scene *Scene) {
	h.logger.Warning("–û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –ø—Ä–µ–≤—å—é")

	streamURL := fmt.Sprintf("%s", scene.Paths.Stream)
	kb := CreateSceneKeyboard(scene, streamURL)
	text := fmt.Sprintf("üé¨ <b>%s</b>", escapeHTML(scene.Title))

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        text,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: kb,
	})
}

// sendHelp –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É
func (h *BotHandler) sendHelp(ctx context.Context, b *bot.Bot, chatID int64) {
	helpText := `üé¨ <b>StashApp Bot</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üé≤ /random - –°–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ
‚ÑπÔ∏è /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚ùì /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É

üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∏–¥–µ–æ</i>`

	kb := CreateHelpKeyboard()

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        helpText,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: kb,
		LinkPreviewOptions: &models.LinkPreviewOptions{
			IsDisabled: bot.True(),
		},
	})
}
